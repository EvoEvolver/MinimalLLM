import{_ as a,o as s,c as n,a as e}from"./app-4b88ea5f.js";const t={},o=e(`<h1 id="parsing-rules-for-chats" tabindex="-1"><a class="header-anchor" href="#parsing-rules-for-chats" aria-hidden="true">#</a> Parsing rules for chats</h1><h2 id="general-usage" tabindex="-1"><a class="header-anchor" href="#general-usage" aria-hidden="true">#</a> General usage</h2><p>Passing <code>parse</code> argument to <code>Chat.complete</code> method, you can parse the result in a specific way.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> mllm <span class="token keyword">import</span> Chat
chat <span class="token operator">=</span> Chat<span class="token punctuation">(</span><span class="token punctuation">)</span>
chat <span class="token operator">+=</span> <span class="token string">&quot;Output a JSON dict with keys &#39;a&#39; and &#39;b&#39; and values 1 and 2&quot;</span>
res <span class="token operator">=</span> chat<span class="token punctuation">.</span>complete<span class="token punctuation">(</span>parse<span class="token operator">=</span><span class="token string">&quot;dict&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Advantages of using the built-in parsing rules:</p><ul><li>Automated retry when the parsing fails</li><li>Robust parsing rules that can handle various outputs.</li></ul><h2 id="dict" tabindex="-1"><a class="header-anchor" href="#dict" aria-hidden="true">#</a> <code>dict</code></h2><p>Parse the result as a JSON dictionary using <code>json.loads</code>. This rule will ignore the <code>&#39;&#39;&#39;json</code> surrounding the output.</p><h2 id="list" tabindex="-1"><a class="header-anchor" href="#list" aria-hidden="true">#</a> <code>list</code></h2><p>Similar to <code>dict</code>, but parse the result as a python list. The parser will find the first <code>[</code> and the last <code>]</code> in the output and try to parse the content in between.</p><h2 id="obj" tabindex="-1"><a class="header-anchor" href="#obj" aria-hidden="true">#</a> <code>obj</code></h2><p>Similar to <code>dict</code>, but parse using <code>ast.literal_eval</code>. This rule is useful when the output is a python object.</p><h2 id="quotes" tabindex="-1"><a class="header-anchor" href="#quotes" aria-hidden="true">#</a> <code>quotes</code></h2><p>Parse the result as a string. This rule will ignore the \`\`\`xxx surrounding the output. This rule is useful when you want the LLM to output codes.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> mllm <span class="token keyword">import</span> Chat
chat <span class="token operator">=</span> Chat<span class="token punctuation">(</span><span class="token punctuation">)</span>
chat <span class="token operator">+=</span> <span class="token string">&quot;Output a python code for quicksort. Start your answer with \`\`\`python&quot;</span>
res <span class="token operator">=</span> chat<span class="token punctuation">.</span>complete<span class="token punctuation">(</span>parse<span class="token operator">=</span><span class="token string">&quot;quotes&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="colon" tabindex="-1"><a class="header-anchor" href="#colon" aria-hidden="true">#</a> <code>colon</code></h2><p>Capture the contents after the first colon <code>:</code> in the output. This rule is useful when you want to limit the topic of the output.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> mllm <span class="token keyword">import</span> Chat
chat <span class="token operator">=</span> Chat<span class="token punctuation">(</span><span class="token punctuation">)</span>
chat <span class="token operator">+=</span> <span class="token string">&quot;Summarize the following text:&lt;text&gt; This is a test.&lt;/text&gt;&quot;</span>
chat <span class="token operator">+=</span> <span class="token string">&quot;Start your answer with Summary:&quot;</span>
res <span class="token operator">=</span> chat<span class="token punctuation">.</span>complete<span class="token punctuation">(</span>parse<span class="token operator">=</span><span class="token string">&quot;colon&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="automated-correction" tabindex="-1"><a class="header-anchor" href="#automated-correction" aria-hidden="true">#</a> Automated correction</h2><p>Some good LLMs do not support a JSON mode, such as claude models. They usually output JSON with small semantic errors. We designed an auto-correction rule to fix these errors by inputting these bad JSON into a cheap LLM that supports JSON mode.</p><p>You have to turn on this feature by setting <code>parse_options.correct_json_by_model = True</code>.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> mllm<span class="token punctuation">.</span>config <span class="token keyword">import</span> parse_options
<span class="token comment"># You have to enable this option before using the \`correct_json_by_model\` rule</span>
parse_options<span class="token punctuation">.</span>correct_json_by_model <span class="token operator">=</span> <span class="token boolean">True</span>
<span class="token comment"># parse_options.cheap_model = &quot;gpt-4o-mini&quot; # The default model is gpt-4o-mini</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22),i=[o];function p(r,c){return s(),n("div",null,i)}const u=a(t,[["render",p],["__file","parsing.html.vue"]]);export{u as default};
